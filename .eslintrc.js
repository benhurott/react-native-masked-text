module.exports = {
  parser: 'babel-eslint',
  extends: [
    'airbnb',
    'plugin:flowtype/recommended',
    'plugin:jest/recommended',
    'plugin:node/recommended',
    'plugin:fp/recommended',
    'plugin:promise/recommended',
  ],
  plugins: [
    'react',
    'react-native',
    'import',
    'flowtype',
    'jest',
    'node',
    'eslint-comments',
    'unicorn',
    'filenames',
    'fp',
    'promise',
    'security',
    'prefer-object-spread',
    'react-intl',
  ],
  env: {
    node: true,
    es6: true,
    jest: true,
    browser: true,
  },
  rules: {
    'max-len': [
      'warn',
      {
        code: 80,
        ignoreUrls: true,
        ignoreTemplateLiterals: true,
        ignoreStrings: true,
        ignoreComments: true,
      },
    ],
    'arrow-parens': ['error', 'as-needed'],
    'flowtype/require-valid-file-annotation': ['warn', 'always'],
    'import/no-extraneous-dependencies': 'off',
    // captured by flow, doesn't work with haste system
    'import/no-unresolved': 'off',
    // same as import/no-unresolved
    'import/extensions': 'off',
    'node/no-unsupported-features': 'off',
    'eslint-comments/no-duplicate-disable': 'error',
    'eslint-comments/no-unlimited-disable': 'error',
    'eslint-comments/no-unused-disable': 'error',
    'eslint-comments/no-unused-enable': 'error',
    'jest/valid-expect': 'off',
    'unicorn/catch-error-name': [
      'error',
      {
        name: 'error',
      },
    ],
    'unicorn/explicit-length-check': 'error',
    'unicorn/throw-new-error': 'error',
    'unicorn/number-literal-case': 'error',
    'unicorn/escape-case': 'error',
    'unicorn/no-array-instanceof': 'error',
    'unicorn/no-new-buffer': 'error',
    'unicorn/no-hex-escape': 'error',
    'unicorn/custom-error-definition': 'error',
    'unicorn/prefer-starts-ends-with': 'error',
    'unicorn/prefer-type-error': 'error',
    'filenames/match-regex': [
      'error',
      '^[a-zA-Z]+(\\.test|\\.config|\\.lambda|\\.cli|\\.ios|\\.android|\\.web)?$',
    ],
    'filenames/match-exported': ['error', null],
    'filenames/no-index': 'error',
    'fp/no-unused-expression': 'off',
    'fp/no-nil': 'off',
    'fp/no-class': 'off',
    'fp/no-this': 'off',
    'fp/no-throw': 'off',
    'fp/no-mutation': [
      'error',
      {
        allowThis: true,
        commonjs: true,
      },
    ],
    'promise/prefer-await-to-then': 'error',
    'promise/prefer-await-to-callbacks': 'error',
    'security/detect-buffer-noassert': 'warn',
    'security/detect-child-process': 'warn',
    'security/detect-disable-mustache-escape': 'warn',
    'security/detect-eval-with-expression': 'warn',
    'security/detect-new-buffer': 'warn',
    'security/detect-no-csrf-before-method-override': 'warn',
    'security/detect-non-literal-fs-filename': 'warn',
    'security/detect-non-literal-regexp': 'warn',
    'security/detect-non-literal-require': 'warn',
    'security/detect-object-injection': 'warn',
    'security/detect-possible-timing-attacks': 'warn',
    'security/detect-pseudoRandomBytes': 'warn',
    'security/detect-unsafe-regex': 'warn',
    'prefer-object-spread/prefer-object-spread': 'error',
    'react/jsx-filename-extension': ['error', { extensions: ['.js'] }],
    // doesn't play well with flow
    'react/require-default-props': 'off',
    'react/prefer-stateless-function': [
      'warn',
      {
        ignorePureComponents: true,
      },
    ],
    'no-use-before-define': [
      'error',
      { functions: false, classes: false, variables: false },
    ],
    'react/prop-types': 'off',
    'react/sort-comp': [
      2,
      {
        order: [
          'static-methods',
          'props',
          'context',
          'lifecycle',
          'everything-else',
          'render',
        ],
      },
    ],
    'react/jsx-wrap-multilines': [
      'error',
      { arrow: false, return: true, assignment: true, declaration: true },
    ],
    'flowtype/generic-spacing': 'off',
    'react-native/no-unused-styles': 'error',
    'react-intl/string-is-marked-for-translation': 'error',
    'react/no-unused-prop-types': 'off',
    'react-native/split-platform-components': 'error',
    'react-native/no-inline-styles': 'error',
    'react-native/no-color-literals': 'error',
    // given usage of flow, normal propTypes usage doesn't apply
    'react/require-default-props': 'off',
    // https://github.com/prettier/eslint-config-prettier/issues/17#issuecomment-298419583
    'no-confusing-arrow': 'off',
  },
  globals: {
    __DEV__: false,
    __TEST__: false,
  },
};
